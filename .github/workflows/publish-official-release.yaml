# SPDX-License-Identifier: Apache-2.0
name: "Publish Official Release"

on:
  workflow_dispatch:
    inputs:
      dry-run-enabled:
        description: "Perform Dry Run"
        type: boolean
        required: false
        default: false
      java-distribution:
        description: "Java JDK Distribution:"
        type: string
        required: false
        default: "temurin"
      java-version:
        description: "Java JDK Version:"
        type: string
        required: false
        default: "21.0.4"
W@
defaults:
  run:
    shell: bash

permissions:
  contents: read


jobs:
  publish:
    name: Publish Official Release of Hedera Transaction Tool
    runs-on: macos-latest

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@c95a14d0e5bab51a9f56296a4eb0e416910cd350 # v2.10.3
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Import GPG Key
        id: gpg
        uses: crazy-max/ghaction-import-gpg@01dd5d3ca463c7f10f7f4f7b4f177225ac661ee4 # v6.1.0
        with:
          git_commit_gpgsign: true
          git_user_signingkey: true
          gpg_private_key: ${{ secrets.GPG_KEY_CONTENTS }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Install GnuPG Tools
        if: ${{ github.event_name == 'workflow_dispatch' && !cancelled() && !failure() }}
        run: |
          if ! command -v gpg2 >/dev/null 2>&1; then
            echo "::group::Updating APT Repository Indices"
              sudo apt update
            echo "::endgroup::"
            echo "::group::Installing GnuPG Tools"
              sudo apt install -y gnupg2
            echo "::endgroup::"
          fi

      - name: Setup Node
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          node-version: 22

      - name: Setup pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
        with:
          version: latest

      - name: Install Python Setup Tools
        run: brew install python-setuptools

      - name: Install Project Dependencies
        run: pnpm install
        working-directory: ./front-end

      # Semantic release
      - name: Install Semantic Release
        if: ${{ github.event_name == 'workflow_dispatch' && !cancelled() && !failure() }}
        run: |
          npm install -g semantic-release@21.0.7 @semantic-release/git@10.0.1 @semantic-release/exec@6.0.3 gradle-semantic-release-plugin@1.7.6
          npm install -g conventional-changelog-conventionalcommits@6.1.0 @commitlint/cli@17.6.6 @commitlint/config-conventional@17.6.6
          npm install -g marked-mangle@1.0.1 marked-gfm-heading-id@3.0.4 semantic-release-conventional-commits@3.0.0

      # Both actual and dry-run semantic-release will output the new version
      # in the logs but actual release should also publish a tag&release on GitHub
      # The frontend packages are built as part of the semantic-release process in this step
      # and the artifacts are added to the release assets
      - name: Run Semantic Release
        if: ${{ !cancelled() && !failure() }}
        env:
          GH_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
          GIT_AUTHOR_NAME: ${{ steps.gpg.outputs.name}}
          GIT_AUTHOR_EMAIL: ${{ steps.gpg.outputs.email}}
          GIT_COMMITTER_NAME: ${{ steps.gpg.outputs.name}}
          GIT_COMMITTER_EMAIL: ${{ steps.gpg.outputs.email}}
        run: |
          if [[ "${{ inputs.dry-run-enabled }}" == "true" ]]; then
            echo "Dry Running semantic-release now..."
            npx semantic-release --dry-run
          else
            echo "Running semantic-release now..."
            npx semantic-release --debug
          fi
