{{- if and .Values.stackgres.enabled (not (lookup "v1" "Secret" .Release.Namespace (printf "transaction-tool-postgres" ))) }}
{{- $rawRandomUserPassword := randAlphaNum 16 }}
{{- $b64UserPassword := $rawRandomUserPassword | b64enc }}
---
apiVersion: v1
kind: Secret
metadata:
  name: transaction-tool-postgres
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/resource-policy": keep
{{- if .Values.global.annotations }}
    {{- toYaml .Values.global.annotations | nindent 4 }}
{{- end }}
  labels: {{- include "common.labels" . | nindent 4 }}
type: kubernetes.io/basic-auth
data:
  dbusername: dHJhbnNhY3Rpb24tdG9vbA==
  dbpassword: {{ $b64UserPassword }}
  dbname: dHJhbnNhY3Rpb24tdG9vbA==
  script.sql: |
    CREATE USER transaction_tool WITH PASSWORD '{{ $rawRandomUserPassword }}';
    CREATE DATABASE transaction_tool OWNER transaction_tool;
    GRANT ALL PRIVILEGES ON DATABASE transaction_tool TO transaction_tool;
{{- else }}
# Secret already exists, skipping creation
{{- end }}

{{- if and .Values.rabbitmq.createSecrets (not (lookup "v1" "Secret" .Release.Namespace .Values.rabbitmq.cluster.config.secretBackend.externalSecret.name)) }}
{{- $randomPassword := randAlphaNum 16 }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ dig "cluster" "config" "secretBackend" "externalSecret" "name" .Values.rabbitmq.secretName .Values.rabbitmq }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/resource-policy": keep
  labels: {{- include "common.labels" . | nindent 4 }}
type: Opaque
stringData:
  default_user.conf: |
    default_user = development
    default_pass = {{ $randomPassword }}
  host: {{ template "transactiontool.fullname" . }}-rmq.{{ .Release.Namespace }}.svc
  username: development
  password: {{ $randomPassword }}
  port: "5672"
  provider: rabbitmq
  type: rabbitmq
{{- else }}
# Secret already exists, skipping creation
{{- end }}

{{- if and .Values.jwt.createSecrets (not (lookup "v1" "Secret" .Release.Namespace .Values.jwt.secretName)) }}
{{- $randomJWTKey := randAlphaNum 16 | b64enc }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.jwt.secretName }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/resource-policy": keep
{{- if .Values.global.annotations }}
    {{- toYaml .Values.global.annotations | nindent 4 }}
{{- end }}
  labels: {{- include "common.labels" . | nindent 4 }}
type: Opaque
data:
  jwt_key: {{ $randomJWTKey }}
{{- end }}

{{- if and .Values.otp.createSecrets (not (lookup "v1" "Secret" .Release.Namespace .Values.otp.secretName)) }}
{{- $randomOTPKey := randAlphaNum 16 | b64enc }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.otp.secretName }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/resource-policy": keep
{{- if .Values.global.annotations }}
    {{- toYaml .Values.global.annotations | nindent 4 }}
{{- end }}
  labels: {{- include "common.labels" . | nindent 4 }}
type: Opaque
data:
  otp_key: {{ $randomOTPKey }}
{{- end }}
