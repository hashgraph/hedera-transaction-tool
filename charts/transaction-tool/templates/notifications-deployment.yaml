apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "transactiontool.fullname" . }}-notifications
  namespace: {{ .Release.Namespace }}
{{- if .Values.global.annotations }}
  annotations:  {{- toYaml .Values.global.annotations | nindent 4 }}
{{- end }}
  labels: {{- include "common.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.notifications.replicas }}
  selector:
    matchLabels:
      app: notifications
  template:
    metadata:
    {{- if .Values.global.annotations }}
      annotations:  {{- toYaml .Values.global.annotations | nindent 8 }}
    {{- end }}
      labels:
        app: notifications
        {{- include "common.labels" . | nindent 8 }}
    spec:
      automountServiceAccountToken: false
      seccompProfile:
        type: RuntimeDefault
      containers:
        - name: notifications
          image: gcr.io/transaction-tool-dev/notifications
          resources:
            requests:
              memory: {{ .Values.notifications.resources.requests.memory | quote }}
              cpu: {{ .Values.notifications.resources.requests.cpu | quote }}
            limits:
              memory: {{ .Values.notifications.resources.limits.memory | quote }}
              cpu: {{ .Values.notifications.resources.limits.cpu | quote }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 10001
            runAsGroup: 10001
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          env:
            - name: HTTP_PORT
              value: '3020'
            - name: AUTH_HOST
              value: 'auth'
            - name: AUTH_PORT
              value: '3001'
            - name: RABBITMQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ dig "cluster" "config" "secretBackend" "externalSecret" "name" .Values.rabbitmq.secretName .Values.rabbitmq }}
                  key: username
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ dig "cluster" "config" "secretBackend" "externalSecret" "name" .Values.rabbitmq.secretName .Values.rabbitmq }}
                  key: password
            - name: RABBITMQ_URI
              value: {{ if not (empty .Values.rabbitmq.endpoint) -}}
                'amqp://$(RABBITMQ_USERNAME):$(RABBITMQ_PASSWORD)@{{ .Values.rabbitmq.endpoint }}:{{ .Values.rabbitmq.port }}'
              {{- else -}}
                'amqp://$(RABBITMQ_USERNAME):$(RABBITMQ_PASSWORD)@{{ template "transactiontool.fullname" . }}-rmq.{{ .Release.Namespace}}.svc:{{ .Values.rabbitmq.port }}'
              {{- end }}
            - name: EMAIL_API_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.emailApi.secretName }}
                  key: host
            - name: EMAIL_API_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.emailApi.secretName }}
                  key: port
            - name: EMAIL_API_SECURE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.emailApi.secretName }}
                  key: secure
            - name: EMAIL_API_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.emailApi.secretName }}
                  key: username
                  optional: true
            - name: EMAIL_API_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.emailApi.secretName }}
                  key: password
                  optional: true
            - name: SENDER_EMAIL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.emailApi.secretName }}
                  key: sender-email
            - name: REDIS_URL
              value: {{ include "transactiontool.redisUrl" .  }}
            - name: POSTGRES_HOST
              value: {{ include "transactiontool.sqlHost" .  }}
            - name: POSTGRES_PORT
              value: {{ .Values.postgres.port | squote }}
            - name: POSTGRES_DATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ coalesce .Values.postgres.secretName (printf "postgres-%s" .Release.Namespace) }}
                  key: database
            - name: POSTGRES_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ coalesce .Values.postgres.secretName (printf "postgres-%s" .Release.Namespace) }}
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ coalesce .Values.postgres.secretName (printf "postgres-%s" .Release.Namespace) }}
                  key: password
            - name: POSTGRES_SYNCHRONIZE
              value: {{ .Values.notifications.env.POSTGRES_SYNCHRONIZE | squote }}
            - name: POSTGRES_MAX_POOL_SIZE
              value: {{ .Values.notifications.env.POSTGRES_MAX_POOL_SIZE | squote }}
