generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "darwin-arm64", "darwin"]
}

datasource db {
  provider = "sqlite"
  url      = "file:"
}

// DO NOT CHANGE MIGRATION MODEL!
model Migration {
  id         Int    @id @default(autoincrement())
  name       String
  created_at Int
}

model User {
  id                      String                    @id @default(uuid())
  email                   String                    @unique
  password                String
  created_at              DateTime                  @default(now())
  updated_at              DateTime                  @updatedAt
  keysPairs               KeyPair[]
  transactions            Transaction[]
  organizationCredentials OrganizationCredentials[]
  HederaAccount           HederaAccount[]
  HederaFile              HederaFile[]
  TransactionDraft        TransactionDraft[]
  ComplexKey              ComplexKey[]
  Contact                 Contact[]
  Claim                   Claim[]
}

model KeyPair {
  id                   String        @id @default(uuid())
  user_id              String
  index                Int
  public_key           String
  private_key          String
  type                 String
  organization_id      String?
  organization_user_id Int?
  secret_hash          String?
  nickname             String?
  user                 User          @relation(fields: [user_id], references: [id])
  organization         Organization? @relation(fields: [organization_id], references: [id])
}

model Organization {
  id        String @id @default(uuid())
  nickname  String
  serverUrl String
  key       String

  keyPairs                KeyPair[]
  OrganizationCredentials OrganizationCredentials[]
  Contact                 Contact[]
}

model OrganizationCredentials {
  id                   String       @id @default(uuid())
  email                String
  password             String
  organization_id      String
  organization_user_id Int?
  user_id              String
  jwtToken             String?
  updated_at           DateTime?    @updatedAt
  user                 User         @relation(fields: [user_id], references: [id])
  organization         Organization @relation(fields: [organization_id], references: [id])
}

model Transaction {
  id                 String   @id @default(uuid())
  name               String
  type               String
  description        String
  transaction_id     String
  transaction_hash   String
  body               String
  status             String
  status_code        Int
  user_id            String
  signature          String
  valid_start        String
  executed_at        Int
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  group_id           String?
  creator_public_key String?
  network            String
  user               User     @relation(fields: [user_id], references: [id])

  GroupItem GroupItem[]
}

model TransactionDraft {
  id               String   @id @default(uuid())
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  user_id          String
  type             String
  transactionBytes String
  description      String
  isTemplate       Boolean? @default(false)
  details          String?
  user             User     @relation(fields: [user_id], references: [id])

  GroupItem GroupItem[]
}

model HederaAccount {
  id         String   @id @default(uuid())
  user_id    String
  account_id String
  nickname   String?
  network    String
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id])
}

model HederaFile {
  id            String    @id @default(uuid())
  user_id       String
  file_id       String
  network       String
  created_at    DateTime  @default(now())
  nickname      String?
  description   String?
  metaBytes     String?
  contentBytes  String?
  lastRefreshed DateTime?
  user          User      @relation(fields: [user_id], references: [id])
}

model ComplexKey {
  id              String   @id @default(uuid())
  user_id         String
  nickname        String
  protobufEncoded String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  user            User     @relation(fields: [user_id], references: [id])
}

model Contact {
  id                         String       @id @default(uuid())
  user_id                    String
  organization_user_id_owner Int
  organization_user_id       Int
  organization_id            String
  nickname                   String
  user                       User         @relation(fields: [user_id], references: [id])
  organization               Organization @relation(fields: [organization_id], references: [id])
}

model TransactionGroup {
  id          String   @id @default(uuid())
  description String
  atomic      Boolean
  created_at  DateTime @default(now())

  GroupItem GroupItem[]
}

model GroupItem {
  transaction_id       String?
  transaction_draft_id String?
  transaction_group_id String
  seq                  String
  transaction          Transaction?      @relation(fields: [transaction_id], references: [id])
  transaction_draft    TransactionDraft? @relation(fields: [transaction_draft_id], references: [id])
  transaction_group    TransactionGroup  @relation(fields: [transaction_group_id], references: [id])

  @@unique([transaction_group_id, seq])
}

model Claim {
  id          String   @id @default(uuid())
  user_id     String
  claim_key   String
  claim_value String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [id])
}
